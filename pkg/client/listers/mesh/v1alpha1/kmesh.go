/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "knative.dev/kmesh/pkg/apis/mesh/v1alpha1"
)

// KMeshLister helps list KMeshes.
// All objects returned here must be treated as read-only.
type KMeshLister interface {
	// List lists all KMeshes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KMesh, err error)
	// KMeshes returns an object that can list and get KMeshes.
	KMeshes(namespace string) KMeshNamespaceLister
	KMeshListerExpansion
}

// kMeshLister implements the KMeshLister interface.
type kMeshLister struct {
	indexer cache.Indexer
}

// NewKMeshLister returns a new KMeshLister.
func NewKMeshLister(indexer cache.Indexer) KMeshLister {
	return &kMeshLister{indexer: indexer}
}

// List lists all KMeshes in the indexer.
func (s *kMeshLister) List(selector labels.Selector) (ret []*v1alpha1.KMesh, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KMesh))
	})
	return ret, err
}

// KMeshes returns an object that can list and get KMeshes.
func (s *kMeshLister) KMeshes(namespace string) KMeshNamespaceLister {
	return kMeshNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KMeshNamespaceLister helps list and get KMeshes.
// All objects returned here must be treated as read-only.
type KMeshNamespaceLister interface {
	// List lists all KMeshes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KMesh, err error)
	// Get retrieves the KMesh from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KMesh, error)
	KMeshNamespaceListerExpansion
}

// kMeshNamespaceLister implements the KMeshNamespaceLister
// interface.
type kMeshNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KMeshes in the indexer for a given namespace.
func (s kMeshNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KMesh, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KMesh))
	})
	return ret, err
}

// Get retrieves the KMesh from the indexer for a given namespace and name.
func (s kMeshNamespaceLister) Get(name string) (*v1alpha1.KMesh, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kmesh"), name)
	}
	return obj.(*v1alpha1.KMesh), nil
}

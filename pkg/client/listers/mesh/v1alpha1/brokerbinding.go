/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "knative.dev/kmesh/pkg/apis/mesh/v1alpha1"
)

// BrokerBindingLister helps list BrokerBindings.
// All objects returned here must be treated as read-only.
type BrokerBindingLister interface {
	// List lists all BrokerBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BrokerBinding, err error)
	// BrokerBindings returns an object that can list and get BrokerBindings.
	BrokerBindings(namespace string) BrokerBindingNamespaceLister
	BrokerBindingListerExpansion
}

// brokerBindingLister implements the BrokerBindingLister interface.
type brokerBindingLister struct {
	indexer cache.Indexer
}

// NewBrokerBindingLister returns a new BrokerBindingLister.
func NewBrokerBindingLister(indexer cache.Indexer) BrokerBindingLister {
	return &brokerBindingLister{indexer: indexer}
}

// List lists all BrokerBindings in the indexer.
func (s *brokerBindingLister) List(selector labels.Selector) (ret []*v1alpha1.BrokerBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BrokerBinding))
	})
	return ret, err
}

// BrokerBindings returns an object that can list and get BrokerBindings.
func (s *brokerBindingLister) BrokerBindings(namespace string) BrokerBindingNamespaceLister {
	return brokerBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BrokerBindingNamespaceLister helps list and get BrokerBindings.
// All objects returned here must be treated as read-only.
type BrokerBindingNamespaceLister interface {
	// List lists all BrokerBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BrokerBinding, err error)
	// Get retrieves the BrokerBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BrokerBinding, error)
	BrokerBindingNamespaceListerExpansion
}

// brokerBindingNamespaceLister implements the BrokerBindingNamespaceLister
// interface.
type brokerBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BrokerBindings in the indexer for a given namespace.
func (s brokerBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BrokerBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BrokerBinding))
	})
	return ret, err
}

// Get retrieves the BrokerBinding from the indexer for a given namespace and name.
func (s brokerBindingNamespaceLister) Get(name string) (*v1alpha1.BrokerBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("brokerbinding"), name)
	}
	return obj.(*v1alpha1.BrokerBinding), nil
}
